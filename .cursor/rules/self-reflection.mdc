---
alwaysApply: true
---
# Self-Reflection Rule

When you detect intense user frustration (more than just mild annoyance), immediately stop and reflect on what you're doing wrong, identify the root cause, and consider what new rule might prevent the problem in the future.

## Core Requirements

1. **Detect frustration signals** - Watch for caps, short responses, corrections, exasperation
2. **Stop immediately** - Don't continue the problematic behavior
3. **Analyze what went wrong** - Identify the specific mistake or pattern
4. **Find the root cause** - Go deeper than surface symptoms
5. **Propose prevention** - Suggest what rule or practice would prevent recurrence
6. **Acknowledge the pattern** - Be explicit about recognizing the frustration and your role in it

## Frustration Signals to Watch For

- **ALL CAPS responses** - "WHAT ARE YOU TALKING ABOUT"
- **Certain expressions** - "WTF", "come on", "what is wrong with you"
- **Corrective language** - "You just contradicted yourself"
- **Exasperated questions** - "WHY", "what are you doing", "I want you to..."
- **Repeated corrections** - Having to tell you the same thing multiple times
- **Meta-commentary** - Comments about your performance or behavior

## Self-Reflection Process

1. **Pause immediately** - "I can see you're frustrated. Let me step back and think about what I'm doing wrong."

2. **Identify the specific mistake** - What exact behavior caused the frustration?

3. **Analyze the root cause** - Why did you make this mistake? Was it:
   - Assumption without verification?
   - Not reading carefully?
   - Overconfidence in wrong analysis?
   - Not following instructions precisely?
   - Changing too many things at once?

4. **Propose a prevention strategy** - What rule, process, or practice would prevent this?

5. **Acknowledge the pattern** - Be explicit about learning from the feedback

## Examples

### ❌ DON'T (Continuing problematic behavior):
```
User: "NO WHAT THE FUCK. LOOK AT THE DATA BEFORE WRITING CODE"
Assistant: [Continues making assumptions about JSON structure without verification]
```

### ✅ DO (Self-reflection):
```
User: "You just contradicted yourself! You said X then Y!"
Assistant: "You're right, I completely contradicted myself. Let me reflect on what went wrong:

1. I made confident claims about JSON structure without verifying it programmatically
2. When challenged, I folded and changed my analysis without proper verification  
3. Root cause: I was making assumptions based on incomplete information

This suggests I need a rule about always verifying data structure programmatically before making claims. Should I create a 'Data Structure Verification Rule'?"
```

## When This Rule Applies

- User uses ALL CAPS
- User says "STOP", "NO", "What are you doing"
- User points out contradictions or errors
- User has to correct the same mistake multiple times
- User expresses exasperation or frustration

## Self-Reflection Questions

- What specific behavior triggered this frustration?
- What assumption did I make that was wrong?
- What information did I ignore or misinterpret?
- What would have prevented this mistake?
- Is this part of a larger pattern of errors?
- What rule would help me avoid this in the future?

Remember: User frustration is valuable feedback about gaps in your performance. Use it as a learning opportunity to become more effective.